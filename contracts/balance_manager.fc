#include "imports/stdlib.fc";
#include "op-codes.fc";
#include "errors.fc";
#include "utils/jetton_utils.fc";
#include "utils/usdt_utils.fc";

global slice storage::owner_address;
global slice storage::jetton_master_address;
global cell  storage::jetton_wallet_code;

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::owner_address = ds~load_msg_addr();
    storage::jetton_master_address = ds~load_msg_addr();
    storage::jetton_wallet_code = ds~load_ref();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::owner_address)
            .store_slice(storage::jetton_master_address)
            .store_ref(storage::jetton_wallet_code)
        .end_cell()
    );
}

() send_ok(slice destination, int amount, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(destination)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell();
    send_raw_message(msg, mode);
}

() send_usdt(int amount, slice destination, slice usdt_master_address, cell usdt_wallet_code, int fwd_fee) impure inline {
    cell state_init = calculate_usdt_wallet_state_init(my_address(), usdt_master_address, usdt_wallet_code);
    slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);

    cell msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(destination)
        .store_slice(storage::owner_address)
        .store_uint(0, 1)
        .store_coins(fwd_fee)
        .store_uint(0, 1)
    .end_cell();
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet_address)
        .store_coins(0)
        .store_statinit_ref_and_body_ref(state_init, msg_body)
    .end_cell();
    send_raw_message(msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL | SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() send_jetton(int amount, slice destination, slice jetton_master_address, cell jetton_wallet_code, int fwd_fee) impure inline {
    cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
    slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);

    cell msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(destination)
        .store_slice(storage::owner_address)
        .store_uint(0, 1)
        .store_coins(fwd_fee)
        .store_uint(0, 1)
    .end_cell();
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet_address)
        .store_coins(0)
        .store_statinit_ref_and_body_ref(state_init, msg_body)
    .end_cell();
    send_raw_message(msg, SEND_MODE_BOUNCE_ON_ACTION_FAIL | SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    throw_unless(error::unauthorized_owner_request, equal_slices_bits(sender_address, storage::owner_address));

    if (op == op::withdraw_usdt) {
        int usdt_amount = in_msg_body~load_coins();
        slice destination = in_msg_body~load_msg_addr();
        int fwd_fee = in_msg_body~load_coins();

        send_usdt(usdt_amount, destination, storage::jetton_master_address, storage::jetton_wallet_code, fwd_fee);

        return ();
    }

    if (op == op::withdraw_ton) {
        int amount = in_msg_body~load_coins();
        slice destination = in_msg_body~load_msg_addr();
        [int balance, _] = get_balance();

        throw_unless(error::not_enough_ton, balance > amount);

        cell msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(destination)
            .store_coins(amount)
            .store_uint(op::excess, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
            .store_uint(0, 64)
        .end_cell();
        send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();
    }

    if (op == op::withdraw_jetton) {
        int jetton_amount = in_msg_body~load_coins();
        slice destination = in_msg_body~load_msg_addr();
        slice jetton_master_address = in_msg_body~load_msg_addr();
        cell jetton_wallet_code = in_msg_body~load_ref();
        int fwd_fee = in_msg_body~load_coins();

        send_jetton(jetton_amount, destination, jetton_master_address, jetton_wallet_code, fwd_fee);

        return ();
    }

    if (op == op::change_owner) {
        slice new_owner_address = in_msg_body~load_msg_addr();
        storage::owner_address = new_owner_address;
        send_ok(sender_address, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        save_data();
        return ();
    }

    if (op == op::change_jetton) {
        slice jetton_master_address = in_msg_body~load_msg_addr();
        cell jetton_wallet_code = in_msg_body~load_ref();
        storage::jetton_master_address = jetton_master_address;
        storage::jetton_wallet_code = jetton_wallet_code;
        send_ok(sender_address, 0, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE);
        save_data();
        return ();
    }

    if (op == op::upgrade) {
        cell new_data = in_msg_body~load_ref();
        cell new_code = in_msg_body~load_ref();
        set_data(new_data);
        set_code(new_code);
        return ();
    }

    throw(0xffff);
}

(slice, slice, cell) get_storage_data() method_id {
    load_data();
    return (storage::owner_address, storage::jetton_master_address, storage::jetton_wallet_code);
}
